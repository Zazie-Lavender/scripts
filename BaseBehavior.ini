[script]
n0=#ProcessPriority on
n1=;Here is where we simply ask the OS to give us a little bit more processing power
n2=;This is to ensure better stability. This is optional and you may prevent it by typing 
n3=;'/disable #ProcessPriority'. You may also change the priority below to your desired level
n4=;to set performance levels to suit your computing situations.
n5=on *:start {
n6=  run wmic process where name="mirc.exe" CALL setpriority "above normal"
n7=}
n8=#ProcessPriority end
n9=
n10=;;Here we just redirect /notices to the active window and handle special cases like ##werewolf's where we want bot notices to also be added 
n11=;;to a window
n12=#noticehandler on
n13=on ^SVS:notice:*:?: { 
n14=  window -De2k0 @Services 
n15=  aline -p @Services < $network $+ : $+ $nick > $1-
n16=  echo -s --> < $+ $nick $+ > $1-
n17=  haltdef
n18=}
n19=on ^1:notice:*:?: { 
n20=  ;if (serv isin $nick) { halt }
n21=  if ($active == @Services) { 
n22=    goto noact
n23=  }
n24=  echo -a --> < $+ $nick $+ > $1-
n25=  :noact
n26=  if ($nick == lykos) { /wn <lykos> $1- }
n27=  haltdef
n28=}
n29=
n30=on ^*:text:*:?:{ 
n31=  if ($nick == %safenick) { aline -p @safepm $nick > $1- }
n32=}
n33=#noticehandler end
n34=
n35=;; % [ $+ [ $# ] ] (for appending together variables)
n36=;;This is where we handle raw IRC numerics and route them appropriately. For example we want to suppress certain events and keep them from spamming
n37=;;the server windows with extra information we don't really need.
n38=#rawhandlers on
n39=;;Cache the version reply so we can match against it later and define script behaviors based on ircd behavior by matching against
n40=;;the server's own version reply as some servers may reply differently or have different behaviors for commands.
n41=raw 005:*: {
n42=  set % [ $+ [ $network ] ] % [ $+ [ $network ] ] $1- 
n43=}
n44=;;stop NAMES spamming the server window...we're also caching it in a hashtable as well so we can search against it later.
n45=;;on ^*:join:#: { names $chan } ;;update names list on join
n46=raw 353:*: { 
n47=  ;;echo -s $1-
n48=  hinc -m [ $+($cid,.,$3) ] i
n49=  hadd -m [ $+($cid,.,$3) ] [ NameBuffer $+ [ $hget($+($cid,.,$3),i) ] ] $4-
n50=  haltdef
n51=}
n52=raw 366:*: {
n53=  haltdef 
n54=}
n55=
n56=;;Ping times to server.
n57=on *:connect: { timer 0 60 /tickping }
n58=on *:PONG: { 
n59=  if ($1 == $server) {
n60=    echo -s RTT(Ticks): $calc($ticks - $2) RTT(Sec): $calc($calc($ticks - $2) / 1000) 
n61=    set [ %lag $+ [ $network ] ] $calc($calc($ticks - $2) / 1000)
n62=    haltdef
n63=  }
n64=}
n65=
n66=;;Better Error handling, so we know when we accidentally send a command the server doesn't understand. 
n67=;;We may also try to shoehorn in some sort of lagtime measurements here, but I don't see why we should as /ping and server's pong works too
n68=raw 421:*: { 
n69=  echo -a ( Server ) 421: $2 $+ : $3-
n70=  haltdef
n71=}
n72=
n73=;;caching names data
n74=alias nametable {
n75=  var %i $hget($+($cid,.,$$1),i)
n76=  while (%i > 0) {
n77=    echo -a $$1 > $+(#,%i) > $+(NameBuffer,%i) > $hget($+($cid,.,$$1),$+(NameBuffer,%i))
n78=    dec %i
n79=  }
n80=}
n81=
n82=alias ntn {
n83=  if (isid) { 
n84=    return $hget($+($cid,.,$$1),$+(NameBuffer,$$2)) 
n85=    halt
n86=  }
n87=  echo -a $$1 > $$2 > $+(NameBuffer,$$2) > $hget($+($cid,.,$$1),$+(NameBuffer,$$2))
n88=}
n89=#rawhandlers end
n90=
n91=
n92=;; Smarter handling of sticky channels. We tell the client to send /detach for stuck chans. This gets us *out* of the channel quietly.
n93=;; Obviously, if you stick a channel; it must be added to %sticky so we know which channels to behave this way too. We may actually 
n94=;; need to add a bouncer detection too; but this can come later and we can just copy %sticky to %oldsticky and unset %sticky if we're connecting 
n95=;; directly instead of with the bouncer like normal. or we could just use a group. 
n96=
n97=#ZNCTweaks on
n98=alias part {
n99=  if ($1 isin %sticky) {
n100=    /detach $1
n101=  }
n102=  else { part $1- }
n103=}
n104=
n105=on me:ctcpreply:ZNC*: {
n106=  echo -a reply > $1-
n107=  if ($1) {
n108=    echo -a ZNC Detected!
n109=  }
n110=}
n111=#ZNCTweaks end
n112=
n113=#MassCommands on
n114=alias d {
n115=  detach $$1
n116=  var %i = $wildtok($1-,*,0,32)
n117=  while (%i > 1) {
n118=    detach [ [ $+($$,%i) ] ]
n119=    dec %i
n120=  }
n121=}
n122=
n123=alias j {
n124=  join $$1
n125=  var %i = $wildtok($1-,*,0,32)
n126=  while (%i > 1) {
n127=    join [ [ $+($$,%i) ] ]
n128=    dec %i
n129=  }
n130=}
n131=
n132=alias mv {
n133=  mode $chan $+(+,$str(v,4)) $$1-4
n134=  var %i = $wildtok($1-,*,0,32)
n135=  while (%i > 4) {
n136=    mode $chan +v [ [ $+($$,%i,-,$calc(%i-4)) ] ] 
n137=    dec %i
n138=  }
n139=}
n140=
n141=alias mdv {
n142=  mode $chan $+(-,$str(v,4)) $$1-4
n143=  var %i = $wildtok($1-,*,0,32)
n144=  while (%i > 4) {
n145=    mode $chan -v [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n146=    dec %i
n147=  }
n148=}
n149=
n150=alias m+y {
n151=  mode $chan $+(+,$str(y,4)) $$1-4
n152=  var %i = $wildtok($1-,*,0,32)
n153=  while (%i > 4) {
n154=    mode $chan +y [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n155=    dec %i
n156=  }
n157=}
n158=
n159=alias m-y {
n160=  mode $chan $+(-,$str(y,4)) $$1-4
n161=  var %i = $wildtok($1-,*,0,32)
n162=  while (%i > 4) {
n163=    mode $chan -y [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n164=    dec %i
n165=  }
n166=}
n167=
n168=alias mq {
n169=  mode $chan $+(+,$str(q,4)) $$1-4
n170=  var %i = $wildtok($1-,*,0,32)
n171=  while (%i > 4) {
n172=    mode $chan +q [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n173=    dec %i
n174=  }
n175=}
n176=
n177=alias mdq {
n178=  mode $chan $+(-,$str(q,4)) $$1-4
n179=  var %i = $wildtok($1-,*,0,32)
n180=  while (%i > 4) {
n181=    mode $chan -q [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n182=    dec %i
n183=  }
n184=}
n185=
n186=alias ma {
n187=  mode $chan $+(+,$str(a,4)) $$1-4
n188=  var %i = $wildtok($1-,*,0,32)
n189=  while (%i > 4) {
n190=    mode $chan +a [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n191=    dec %i
n192=  }
n193=}
n194=
n195=alias mda {
n196=  mode $chan $+(-,$str(a,4)) $$1-4
n197=  var %i = $wildtok($1-,*,0,32)
n198=  while (%i > 4) {
n199=    mode $chan -a [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n200=    dec %i
n201=  }
n202=}
n203=
n204=alias mo {
n205=  mode $chan $+(+,$str(o,4)) $$1-4
n206=  var %i = $wildtok($1-,*,0,32)
n207=  while (%i > 4) {
n208=    mode $chan +o [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n209=    dec %i
n210=  }
n211=}
n212=
n213=alias mdo {
n214=  mode $chan $+(-,$str(o,4)) $$1-4
n215=  var %i = $wildtok($1-,*,0,32)
n216=  while (%i > 4) {
n217=    mode $chan -o [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n218=    dec %i
n219=  }
n220=}
n221=
n222=alias mh {
n223=  mode $chan $+(+,$str(h,4)) $$1-4
n224=  var %i = $wildtok($1-,*,0,32)
n225=  while (%i > 4) {
n226=    mode $chan +h [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n227=    dec %i
n228=  }
n229=}
n230=
n231=alias mdq {
n232=  mode $chan $+(-,$str(h,4)) $$1-4
n233=  var %i = $wildtok($1-,*,0,32)
n234=  while (%i > 4) {
n235=    mode $chan -h [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n236=    dec %i
n237=  }
n238=}
n239=
n240=alias mm {
n241=  var %i = $wildtok($2-,*,0,32)
n242=  while (%i > 1) {
n243=    mode $chan [ $+(+,$1) ] [ [ $+($$,%i) ] ]
n244=    dec %i
n245=  }
n246=}
n247=
n248=alias mdm {
n249=  var %i = $wildtok($1-,*,0,32)
n250=  while (%i > 1) {
n251=    mode $chan [ $+(-,$1) ] [ [ $+($$,%i) ] ]
n252=    dec %i
n253=  }
n254=}
n255=#MassCommands end
n256=
n257=#Notifyfix on
n258=alias monitor {
n259=  if ($network isin %nomon) {
n260=    watch $1-
n261=  }
n262=  else { monitor $1- }
n263=}
n264=
n265=#Notifyfix end
n266=
n267=#umodeghandler on
n268=;;Auto-accept users on voice in ##werewolf. 
n269=on ^*:voice:##werewolf: {
n270=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n271=  /accept $vnick 
n272=  /accept *
n273=}
n274=;;Opers have auto /accept
n275=on ^*:voice:#freenode: {
n276=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n277=  /accept $vnick 
n278=  /accept *
n279=}
n280=;;Freenode won't track nick changes for accept lists.
n281=on ^*:nick: { 
n282=  if ($newnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n283=  if ($newnick isvoice ##werewolf) { /accept $newnick | /accept * }
n284=  if ($newnick isvoice #freenode) { /accept $newnick | /accept * }
n285=}
n286=raw 718:*: {
n287=  if ($2 ischan) { /accept $2 | /accept * }
n288=}
n289=raw 281:*: { set [ % $+ [ $network $+ . $+ accept ] ] $2- }
n290=#umodeghandler end
