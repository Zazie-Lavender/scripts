[script]
n0=#ProcessPriority on
n1=;Here is where we simply ask the OS to give us a little bit more processing power
n2=;This is to ensure better stability. This is optional and you may prevent it by typing 
n3=;'/disable #ProcessPriority'. You may also change the priority below to your desired level
n4=;to set performance levels to suit your computing situations.
n5=
n6=run wmic process where name="mirc.exe" CALL setpriority "above normal"
n7=#ProcessPriority end
n8=
n9=;;Here we just redirect /notices to the active window and handle special cases like ##werewolf's where we want bot notices to also be added 
n10=;;to a window
n11=#noticehandler on
n12=on ^*:notice:*:?: { 
n13=  if ($nick iswm *serv) { haltdef }
n14=  if (SVS isin $level($address($nick,2))) { haltdef }
n15=  echo -a --> < $+ $nick $+ > $1-
n16=  if ($nick == lykos) { /wn <lykos> $1- }
n17=}
n18=
n19=on ^*:text:*:?:{ 
n20=  if ($nick == %safenick) { aline -p @safepm $nick > $1- }
n21=}
n22=#noticehandler end
n23=
n24=;; % [ $+ [ $# ] ] (for appending together variables)
n25=;;This is where we handle raw IRC numerics and route them appropriately. For example we want to suppress certain events and keep them from spamming
n26=;;the server windows with extra information we don't really need.
n27=#rawhandlers on
n28=;;Cache the version reply so we can match against it later and define script behaviors based on ircd behavior by matching against
n29=;;the server's own version reply as some servers may reply differently or have different behaviors for commands.
n30=raw 005:*: {
n31=  set % [ $+ [ $network ] ] % [ $+ [ $network ] ] $1- 
n32=}
n33=;;stop NAMES spamming the server window...we're also caching it in a hashtable as well so we can search against it later.
n34=;;on ^*:join:#: { names $chan } ;;update names list on join
n35=raw 353:*: { 
n36=  ;;echo -s $1-
n37=  hinc -m [ $+($cid,.,$3) ] i
n38=  hadd -m [ $+($cid,.,$3) ] [ NameBuffer $+ [ $hget($+($cid,.,$3),i) ] ] $4-
n39=  haltdef
n40=}
n41=raw 366:*: {
n42=  haltdef 
n43=}
n44=
n45=;;Ping times to server.
n46=on *:connect: { timer 0 60 /tickping }
n47=on *:PONG: { 
n48=  if ($1 == $server) {
n49=    echo -s RTT(Ticks): $calc($ticks - $2) RTT(Sec): $calc($calc($ticks - $2) / 1000) 
n50=    set [ %lag $+ [ $network ] ] $calc($calc($ticks - $2) / 1000)
n51=    haltdef
n52=  }
n53=}
n54=
n55=;;Better Error handling, so we know when we accidentally send a command the server doesn't understand. 
n56=;;We may also try to shoehorn in some sort of lagtime measurements here, but I don't see why we should as /ping and server's pong works too
n57=raw 421:*: { 
n58=  echo -a ( Server ) 421: $2 $+ : $3-
n59=  haltdef
n60=}
n61=
n62=;;caching names data
n63=alias nametable {
n64=  var %i $hget($+($cid,.,$$1),i)
n65=  while (%i > 0) {
n66=    echo -a $$1 > $+(#,%i) > $+(NameBuffer,%i) > $hget($+($cid,.,$$1),$+(NameBuffer,%i))
n67=    dec %i
n68=  }
n69=}
n70=
n71=alias ntn {
n72=  if (isid) { 
n73=    return $hget($+($cid,.,$$1),$+(NameBuffer,$$2)) 
n74=    halt
n75=  }
n76=  echo -a $$1 > $$2 > $+(NameBuffer,$$2) > $hget($+($cid,.,$$1),$+(NameBuffer,$$2))
n77=}
n78=#rawhandlers end
n79=
n80=
n81=;; Smarter handling of sticky channels. We tell the client to send /detach for stuck chans. This gets us *out* of the channel quietly.
n82=;; Obviously, if you stick a channel; it must be added to %sticky so we know which channels to behave this way too. We may actually 
n83=;; need to add a bouncer detection too; but this can come later and we can just copy %sticky to %oldsticky and unset %sticky if we're connecting 
n84=;; directly instead of with the bouncer like normal. or we could just use a group. 
n85=
n86=#ZNCTweaks on
n87=alias part {
n88=  if ($1 isin %sticky) {
n89=    /detach $1
n90=  }
n91=  else { part $1- }
n92=}
n93=
n94=on me:ctcpreply:ZNC*: {
n95=  echo -a reply > $1-
n96=  if ($1) {
n97=    echo -a ZNC Detected!
n98=  }
n99=}
n100=#ZNCTweaks end
n101=
n102=#MassCommands on
n103=alias d {
n104=  detach $$1
n105=  var %i = $wildtok($1-,*,0,32)
n106=  while (%i > 1) {
n107=    detach [ [ $+($$,%i) ] ]
n108=    dec %i
n109=  }
n110=}
n111=
n112=alias j {
n113=  join $$1
n114=  var %i = $wildtok($1-,*,0,32)
n115=  while (%i > 1) {
n116=    join [ [ $+($$,%i) ] ]
n117=    dec %i
n118=  }
n119=}
n120=
n121=alias mv {
n122=  mode $chan $+(+,$str(v,4)) $$1-4
n123=  var %i = $wildtok($1-,*,0,32)
n124=  while (%i > 4) {
n125=    mode $chan +v [ [ $+($$,%i,-,$calc(%i-4)) ] ] 
n126=    dec %i
n127=  }
n128=}
n129=
n130=alias mdv {
n131=  mode $chan $+(-,$str(v,4)) $$1-4
n132=  var %i = $wildtok($1-,*,0,32)
n133=  while (%i > 4) {
n134=    mode $chan -v [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n135=    dec %i
n136=  }
n137=}
n138=
n139=alias m+y {
n140=  mode $chan $+(+,$str(y,4)) $$1-4
n141=  var %i = $wildtok($1-,*,0,32)
n142=  while (%i > 4) {
n143=    mode $chan +y [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n144=    dec %i
n145=  }
n146=}
n147=
n148=alias m-y {
n149=  mode $chan $+(-,$str(y,4)) $$1-4
n150=  var %i = $wildtok($1-,*,0,32)
n151=  while (%i > 4) {
n152=    mode $chan -y [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n153=    dec %i
n154=  }
n155=}
n156=
n157=alias mq {
n158=  mode $chan $+(+,$str(q,4)) $$1-4
n159=  var %i = $wildtok($1-,*,0,32)
n160=  while (%i > 4) {
n161=    mode $chan +q [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n162=    dec %i
n163=  }
n164=}
n165=
n166=alias mdq {
n167=  mode $chan $+(-,$str(q,4)) $$1-4
n168=  var %i = $wildtok($1-,*,0,32)
n169=  while (%i > 4) {
n170=    mode $chan -q [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n171=    dec %i
n172=  }
n173=}
n174=
n175=alias ma {
n176=  mode $chan $+(+,$str(a,4)) $$1-4
n177=  var %i = $wildtok($1-,*,0,32)
n178=  while (%i > 4) {
n179=    mode $chan +a [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n180=    dec %i
n181=  }
n182=}
n183=
n184=alias mda {
n185=  mode $chan $+(-,$str(a,4)) $$1-4
n186=  var %i = $wildtok($1-,*,0,32)
n187=  while (%i > 4) {
n188=    mode $chan -a [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n189=    dec %i
n190=  }
n191=}
n192=
n193=alias mo {
n194=  mode $chan $+(+,$str(o,4)) $$1-4
n195=  var %i = $wildtok($1-,*,0,32)
n196=  while (%i > 4) {
n197=    mode $chan +o [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n198=    dec %i
n199=  }
n200=}
n201=
n202=alias mdo {
n203=  mode $chan $+(-,$str(o,4)) $$1-4
n204=  var %i = $wildtok($1-,*,0,32)
n205=  while (%i > 4) {
n206=    mode $chan -o [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n207=    dec %i
n208=  }
n209=}
n210=
n211=alias mh {
n212=  mode $chan $+(+,$str(h,4)) $$1-4
n213=  var %i = $wildtok($1-,*,0,32)
n214=  while (%i > 4) {
n215=    mode $chan +h [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n216=    dec %i
n217=  }
n218=}
n219=
n220=alias mdq {
n221=  mode $chan $+(-,$str(h,4)) $$1-4
n222=  var %i = $wildtok($1-,*,0,32)
n223=  while (%i > 4) {
n224=    mode $chan -h [ [ $+($$,%i,-,$calc(%i-4)) ] ]
n225=    dec %i
n226=  }
n227=}
n228=
n229=alias mm {
n230=  var %i = $wildtok($2-,*,0,32)
n231=  while (%i > 1) {
n232=    mode $chan [ $+(+,$1) ] [ [ $+($$,%i) ] ]
n233=    dec %i
n234=  }
n235=}
n236=
n237=alias mdm {
n238=  var %i = $wildtok($1-,*,0,32)
n239=  while (%i > 1) {
n240=    mode $chan [ $+(-,$1) ] [ [ $+($$,%i) ] ]
n241=    dec %i
n242=  }
n243=}
n244=#MassCommands end
n245=
n246=#Notifyfix on
n247=alias monitor {
n248=  if ($network isin %nomon) {
n249=    watch $1-
n250=  }
n251=  else { monitor $1- }
n252=}
n253=
n254=#Notifyfix end
n255=
n256=#umodeghandler on
n257=;;Auto-accept users on voice in ##werewolf. 
n258=on ^*:voice:##werewolf: {
n259=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n260=  /accept $vnick 
n261=  /accept *
n262=}
n263=;;Opers have auto /accept
n264=on ^*:voice:#freenode: {
n265=  if ($vnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n266=  /accept $vnick 
n267=  /accept *
n268=}
n269=;;Freenode won't track nick changes for accept lists.
n270=on ^*:nick: { 
n271=  if ($newnick isin [ % $+ [ $network $+ . $+ accept ] ]) { halt }
n272=  if ($newnick isvoice ##werewolf) { /accept $newnick | /accept * }
n273=  if ($newnick isvoice #freenode) { /accept $newnick | /accept * }
n274=}
n275=raw 718:*: {
n276=  if ($2 ischan) { /accept $2 | /accept * }
n277=}
n278=raw 281:*: { set [ % $+ [ $network $+ . $+ accept ] ] $2- }
n279=#umodeghandler end
