[script]
n0=#ZNCAuth on
n1=;;Automated authentication code. Cleaned up for git upload...changed hardcoded params to variables.
n2=
n3=;Detect bad shutdowns and toggle a variable bit for them. If we're having issues where we're connected to the last server, we can run the strapfix.
n4=;While we can disable this behavior from mIRC; I'm not going to include that fix here; we're not going to enforce mIRC settings from script. 
n5=;We've also included a manual detect for the condition, you can remove that 
n6=;' || (%network != %BouncerNet0))' 
n7=;and the first parenthesis from the if statement if you don't want it.
n8=;or you can comment out the following two lines of code if you don't want auto-strapfix to run.
n9=on ^*:connect: { if ((%unsafe == 1) || (%network != %BouncerNet0)) { strapfix } }
n10=on ^*:exit: { unset %unsafe }
n11=
n12=raw 464:*: {
n13=  if ($server == %BouncerSvr) {
n14=    ;;Changed hardcoded user/password to a referenced variable for Github upload.
n15=    quote pass $+(%BouncerUsr,:,$decode(%BouncerPwd,m))
n16=    ;echo -a <---DEBUG---> Got connect to bouncer
n17=    timestamp -e on
n18=    set %network $scon(0)
n19=    set %unsafe 1
n20=    if (%cooldown == 1) {
n21=      echo -a 6,4Blocked Bootstrap Command. Cooldown Active
n22=      halt
n23=    }
n24=    /timer 1 2 /bootstrap
n25=  }
n26=}
n27=#ZNCAuth end
n28=
n29=#wolfgame on
n30=on ^*:text:*:##werewolf: { if ($nick == lykos) { /wn <#lykos> $1- } }
n31=
n32=alias wn {
n33=  window -dDe2k0 @wolf /wn
n34=  aline -p @wolf $$1-
n35=}
n36=#wolfgame end
n37=
n38=#ZNCAutoCon on
n39=;;Bootstrap Autoconnect.
n40=
n41=alias bootstrap {
n42=  ;;Check to see if we've been called recently
n43=
n44=  set -u60 %cooldown 1
n45=  echo -a Node 0
n46=  ;;This performs the basic autoconnect and spawns the new server connections
n47=
n48=  if ($scon(1).network == freenode) {
n49=    ;echo -a Node 1
n50=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet1,:,$decode(%BouncerPwd,m))
n51=    ;echo -a Node 2
n52=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet2,:,$decode(%BouncerPwd,m))
n53=    ;echo -a Node 3
n54=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet3,:,$decode(%BouncerPwd,m))
n55=    ;echo -a Node 4
n56=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet4,:,$decode(%BouncerPwd,m))
n57=    ;echo -a Node 5
n58=    timer 1 5 /echo -a 5Launched timers to close off commonly spawned windows that are unnecessary
n59=    timer 1 15 /scid -a /close -m *ctcpflood
n60=    timer 1 119 /scid -a /znc clearallchannelbuffers
n61=    timer 1 120 /scid -a /close -m *status
n62=  }
n63=}
n64=
n65=;Stubbed event for old feature. Does nothing 7 times on disconnect; to allow for some seriously useful cleanup
n66=on ^*:disconnect: {
n67=  noop
n68=  noop
n69=  noop
n70=  noop
n71=  noop
n72=  noop
n73=  noop
n74=}
n75=
n76=#ZNCAutoCon end
n77=
n78=#MassCommands on
n79=alias mping {
n80=  var %sel $sline($chan,0)
n81=  var %del 1
n82=  while (%sel > 0) {
n83=    /timer 1 %del /ctcp $sline($chan,%sel) PING
n84=    dec %sel 
n85=    inc %del
n86=  }
n87=}
n88=#MassCommands end
n89=
n90=#utilities on
n91=
n92=alias hdump {
n93=  var %i $hget($$1,0).item
n94=  while (%i > 0) {
n95=    echo -a $1 > $+(#,%i) > $hget($1,%i).item > $hget($1,%i).data
n96=    dec %i
n97=  }
n98=}
n99=
n100=alias htables {
n101=  var %i $hget(0)
n102=  while (%i > 0) {
n103=    echo -a %i > $hget(%i)
n104=    dec %i
n105=  }
n106=}
n107=
n108=#utilities end
n109=
n110=#dogesoak off
n111=
n112=on ^*:text:*:#dogecoin {
n113=  if ($nick != CodicAI) {
n114=    hadd -m SFC LastSpeak $nick
n115=    hinc -mz SFC LineScore $iif($nick isin %sfctrolls,10,$iif($nick = $hget(SFC,LastSpeak),5,3))
n116=    if ($hget(SFC,LineScore) < 10) { 
n117=      echo -a 0,7Linescore is within acceptable parameters 
n118=      msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n119=        trolls and fails to keep the silence add 10s)
n120=    }
n121=  }
n122=}
n123=
n124=on CAI:text:DED*:#dogecoin {
n125=  hinc -mu3600 SFC Count
n126=  echo -a 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore)
n127=  msg #dogecoin-silent No. $+ $hget(SFC,Count) 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) >
n128=  if ($hget(SFC,LineScore) < 11) { 
n129=    echo -a 0,7Linescore is within acceptable parameters 
n130=    msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n131=      trolls and fails to keep the silence add 10s)
n132=  }
n133=  hinc -mz SFC LineScore 10
n134=}
n135=
n136=on CAI:text:*minutes*:#dogecoin {
n137=  hadd -u30 SFC LineScore 0
n138=}
n139=
n140=alias ls {
n141=  echo -a Linescore is $hget(SFC,LineScore)
n142=}
n143=
n144=alias lsb {
n145=  echo -a Linescore is $hget(SFC,LineScore)
n146=  msg #dogecoin-silent Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n147=    trolls and fails to keep the silence add 10s)
n148=}
n149=
n150=alias ta {
n151=  set %sfctrolls %sfctrolls $$1
n152=  echo -a 2Troll List: %sfctrolls
n153=}
n154=
n155=;;on ^*:text:*:#dogecoin: { 
n156=;;var %r $r(1,25)
n157=;;var %e $r(1,25)
n158=;;if ((%r == %e) && (%nospam != 1)) {
n159=;;//msg $chan $gettok(%p,%e,44)
n160=;;//echo -a #dogecoin -> $gettok(%p,%e,44)
n161=;;//set $eval($+(-u,$r(2880,3000))) %nospam 1
n162=;;inc %dsexec
n163=;;}
n164=;;}
n165=
n166=#dogesoak end
n167=
n168=#miscaliases on
n169=
n170=alias tkq { return Use, but never overuse IRC, then you will also be happy within IRC } 
n171=alias tkk { kick $$1 $2 $tkq }
n172=
n173=alias tk { kick $chan $$1 $tkq }
n174=
n175=
n176=#miscaliases end
