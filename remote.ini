[script]
n0=#ZNCAuth on
n1=;;Automated authentication code. Cleaned up for git upload...changed hardcoded params to variables.
n2=
n3=;Detect bad shutdowns and toggle a variable bit for them. If we're having issues where we're connected to the last server, we can run the strapfix.
n4=;While we can disable this behavior from mIRC; I'm not going to include that fix here; we're not going to enforce mIRC settings from script. 
n5=;We've also included a manual detect for the condition, you can remove that 
n6=;' || (%network != %BouncerNet0))' 
n7=;and the first parenthesis from the if statement if you don't want it.
n8=;or you can comment out the following two lines of code if you don't want auto-strapfix to run.
n9=on ^*:connect: { if ((%unsafe == 1) || (%network != %BouncerNet0)) { strapfix } }
n10=on ^*:exit: { unset %unsafe }
n11=
n12=on ^*:disconnect: { if ($network == freenode) { exit -r } }
n13=
n14=raw 464:*: {
n15=  if ($server == %BouncerSvr) {
n16=    ;;Changed hardcoded user/password to a referenced variable for Github upload.
n17=    quote pass $+(%BouncerUsr,:,$decode(%BouncerPwd,m))
n18=    ;echo -a <---DEBUG---> Got connect to bouncer
n19=    timestamp -e on
n20=    set %network $scon(0)
n21=    set %unsafe 1
n22=    if (%cooldown == 1) {
n23=      echo -a 6,4Blocked Bootstrap Command. Cooldown Active
n24=      halt
n25=    }
n26=    /timer 1 2 /bootstrap
n27=  }
n28=}
n29=#ZNCAuth end
n30=
n31=#wolfgame on
n32=on ^*:text:*:##werewolf: { if ($nick == lykos) { /wn <#lykos> $1- } }
n33=
n34=alias wn {
n35=  window -dDe2k0 @wolf /wn
n36=  aline -p @wolf $$1-
n37=}
n38=#wolfgame end
n39=
n40=#ZNCAutoCon on
n41=;;Bootstrap Autoconnect.
n42=
n43=alias bootstrap {
n44=  ;;Check to see if we've been called recently
n45=
n46=  set -u60 %cooldown 1
n47=  echo -a Node 0
n48=  ;;This performs the basic autoconnect and spawns the new server connections
n49=
n50=  if ($scon(1).network == freenode) {
n51=    ;echo -a Node 1
n52=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet1,:,$decode(%BouncerPwd,m))
n53=    ;echo -a Node 2
n54=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet2,:,$decode(%BouncerPwd,m))
n55=    ;echo -a Node 3
n56=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet3,:,$decode(%BouncerPwd,m))
n57=    ;echo -a Node 4
n58=    server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet4,:,$decode(%BouncerPwd,m))
n59=    ;echo -a Node 5
n60=    timer 1 5 /echo -a 5Launched timers to close off commonly spawned windows that are unnecessary
n61=    timer 1 15 /scid -a /close -m *ctcpflood
n62=    timer 1 119 /scid -a /znc clearallchannelbuffers
n63=    timer 1 120 /scid -a /close -m *status
n64=  }
n65=}
n66=
n67=;Stubbed event for old feature. Does nothing 7 times on disconnect; to allow for some seriously useful cleanup
n68=on ^*:disconnect: {
n69=  noop
n70=  noop
n71=  noop
n72=  noop
n73=  noop
n74=  noop
n75=  noop
n76=}
n77=
n78=#ZNCAutoCon end
n79=
n80=#MassCommands on
n81=alias mping {
n82=  var %sel $sline($chan,0)
n83=  var %del 1
n84=  while (%sel > 0) {
n85=    /timer 1 %del /ctcp $sline($chan,%sel) PING
n86=    dec %sel 
n87=    inc %del
n88=  }
n89=}
n90=#MassCommands end
n91=
n92=#utilities on
n93=
n94=alias hdump {
n95=  var %i $hget($$1,0).item
n96=  while (%i > 0) {
n97=    echo -a $1 > $+(#,%i) > $hget($1,%i).item > $hget($1,%i).data
n98=    dec %i
n99=  }
n100=}
n101=
n102=alias htables {
n103=  var %i $hget(0)
n104=  while (%i > 0) {
n105=    echo -a %i > $hget(%i)
n106=    dec %i
n107=  }
n108=}
n109=
n110=#utilities end
n111=
n112=#dogesoak off
n113=
n114=on ^*:text:*:#dogecoin {
n115=  if ($nick != CodicAI) {
n116=    hadd -m SFC LastSpeak $nick
n117=    hinc -mz SFC LineScore $iif($nick isin %sfctrolls,10,$iif($nick = $hget(SFC,LastSpeak),5,3))
n118=    if ($hget(SFC,LineScore) < 10) { 
n119=      echo -a 0,7Linescore is within acceptable parameters 
n120=      msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n121=        trolls and fails to keep the silence add 10s)
n122=    }
n123=  }
n124=}
n125=
n126=on CAI:text:DED*:#dogecoin {
n127=  hinc -mu3600 SFC Count
n128=  echo -a 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore)
n129=  msg #dogecoin-silent No. $+ $hget(SFC,Count) 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) >
n130=  if ($hget(SFC,LineScore) < 11) { 
n131=    echo -a 0,7Linescore is within acceptable parameters 
n132=    msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n133=      trolls and fails to keep the silence add 10s)
n134=  }
n135=  hinc -mz SFC LineScore 10
n136=}
n137=
n138=on CAI:text:*minutes*:#dogecoin {
n139=  hadd -u30 SFC LineScore 0
n140=}
n141=
n142=alias ls {
n143=  echo -a Linescore is $hget(SFC,LineScore)
n144=}
n145=
n146=alias lsb {
n147=  echo -a Linescore is $hget(SFC,LineScore)
n148=  msg #dogecoin-silent Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n149=    trolls and fails to keep the silence add 10s)
n150=}
n151=
n152=alias ta {
n153=  set %sfctrolls %sfctrolls $$1
n154=  echo -a 2Troll List: %sfctrolls
n155=}
n156=
n157=;;on ^*:text:*:#dogecoin: { 
n158=;;var %r $r(1,25)
n159=;;var %e $r(1,25)
n160=;;if ((%r == %e) && (%nospam != 1)) {
n161=;;//msg $chan $gettok(%p,%e,44)
n162=;;//echo -a #dogecoin -> $gettok(%p,%e,44)
n163=;;//set $eval($+(-u,$r(2880,3000))) %nospam 1
n164=;;inc %dsexec
n165=;;}
n166=;;}
n167=
n168=#dogesoak end
n169=
n170=#miscaliases on
n171=
n172=alias tkq { return Use, but never overuse IRC, then you will also be happy within IRC } 
n173=alias tkk { kick $$1 $2 $tkq }
n174=
n175=alias tk { kick $chan $$1 $tkq }
n176=
n177=alias idlebotirc {
n178=  noop $$?="Did you Log out of the Web client? (no input) = no"
n179=  timer 1 2 /part #idlebot
n180=  echo -a Please wait One Minute, as this script completes the idlebot administrative task
n181=  timer 1 8 /nick Zazie_Lavender
n182=  timer 1 16 /join #idlebot
n183=  timer 1 24 /msg IdleMaster $$?1="Idle Command 1 - (!idle-*)" $$?="Command Verb and Params"
n184=  timer 1 28 /msg IdleMaster $?1="Idle Command 2 - (!idle-*)" $?="Command Verb and Params"
n185=  timer 1 32 /msg IdleMaster $?1="Idle Command 3 - (!idle-*)" $?="Command Verb and Params"
n186=  timer 1 36 /msg IdleMaster $?1="Idle Command 4 - (!idle-*)" $?="Command Verb and Params"
n187=  timer 1 40 /part #idlebot
n188=  timer 1 50 /nick Melody\Concerto
n189=  timer 1 60 /join #idlebot
n190=  echo -a Script complete. Idlebot IRC commands sent.
n191=}
n192=alias rnick {
n193=  return $fline($chan,*,$r(1,$line($chan,0,1)),1).text
n194=}
n195=#miscaliases end
n196=
n197=#operkey on
n198=alias F2 {
n199=  var %user %operu. [ $+ [ $network ] ]
n200=  var %pass %operp. [ $+ [ $network ] ]
n201=  if (!%user) { 
n202=    /echo -a 4,11NO O:LINES CONFIGURED FOR $network $+ ! 
n203=    halt
n204=  }
n205=  oper $decode(%user,m) $decode(%pass,m)
n206=}
n207=#operkey end
