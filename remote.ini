[script]
n0=#ZNCAuth on
n1=;;Automated authentication code. Cleaned up for git upload...changed hardcoded params to variables.
n2=
n3=;Detect bad shutdowns and toggle a variable bit for them. If we're having issues where we're connected to the last server, we can run the strapfix.
n4=;While we can disable this behavior from mIRC; I'm not going to include that fix here; we're not going to enforce mIRC settings from script. 
n5=;We've also included a manual detect for the condition, you can remove that 
n6=;' || (%network != %BouncerNet0))' 
n7=;and the first parenthesis from the if statement if you don't want it.
n8=
n9=on ^*:exit: { unset %unsafe }
n10=
n11=;on ^*:disconnect: { if ($network == freenode) { exit -r } }
n12=
n13=raw 464:*: {
n14=  if ($server == %BouncerSvr) {
n15=    ;;Changed hardcoded user/password to a referenced variable for Github upload.
n16=    quote pass $+(%BouncerUsr,:,$decode(%BouncerPwd,m))
n17=    ;echo -a <---DEBUG---> Got connect to bouncer
n18=    timestamp -e on
n19=    set %network $scon(0)
n20=    set %unsafe 1
n21=    if (%cooldown == 1) {
n22=      echo -a 6,4Blocked Bootstrap Command. Cooldown Active
n23=      halt
n24=    }
n25=    /timer 1 2 /bootstrap
n26=    set -u300 %cooldown 1
n27=  }
n28=}
n29=#ZNCAuth end
n30=
n31=#wolfgame on
n32=on wolf:text:*:##werewolf { set %wolfnick $nick }
n33=on ^*:text:*:##werewolf: { if ($nick == %wolfnick) { /wn <#lykos> $1- } }
n34=
n35=alias wn {
n36=  window -dDe2k0 @wolf /wn
n37=  aline -p @wolf $$1-
n38=}
n39=#wolfgame end
n40=
n41=#ZNCAutoCon on
n42=;;Bootstrap Autoconnect.
n43=
n44=alias bootstrap {
n45=  ;;Check to see if we've been called recently
n46=
n47=  set -u60 %cooldown 1
n48=  echo -a Node 0
n49=  ;;This performs the basic autoconnect and spawns the new server connections
n50=  ;We force each node to check and see if it is connected to the correct network,
n51=  ;and fire off the connection only if the network is missing
n52=
n53=  if ($scon(1).network == %BouncerNet0) {
n54=    if ($scon(2).$network != %BouncerNet1) {
n55=      ;echo -a Node 1
n56=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet1,:,$decode(%BouncerPwd,m))
n57=      var %c =1
n58=    }
n59=    if ($scon(3).$network != %BouncerNet2) {
n60=      ;echo -a Node 2
n61=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet2,:,$decode(%BouncerPwd,m))
n62=      var %c =1
n63=    }
n64=    if ($scon(4).$network != %BouncerNet3) {
n65=      ;echo -a Node 3
n66=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet3,:,$decode(%BouncerPwd,m))
n67=      var %c = 1
n68=    }
n69=    if ($scon(5).$network != %BouncerNet4n) {
n70=      ;There's a little disconnect between network name configured on bouncer and on server configs. 
n71=      ;%BouncerNet4n only contains the network name the server is relaying to us.
n72=      ;echo -a Node 4
n73=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet4,:,$decode(%BouncerPwd,m))
n74=      var %c = 1
n75=    }
n76=    if (%c = 1) {
n77=      ;echo -a Node 5
n78=      timer 1 5 /echo -a 5Launched timers to close off commonly spawned windows that are unnecessary
n79=      timer 1 25 /scid -a /close -m *ctcpflood
n80=      timer 1 119 /scid -a /znc clearallchannelbuffers
n81=      timer 1 120 /scid -a /close -m *status
n82=    }
n83=    else { echo -a 12,13Doing nothing, all servers are connected }
n84=  }
n85=}
n86=#ZNCAutoCon end
n87=
n88=#MassCommands on
n89=alias mping {
n90=  var %sel $sline($chan,0)
n91=  var %del 1
n92=  while (%sel > 0) {
n93=    /timer 1 %del /ctcp $sline($chan,%sel) PING
n94=    dec %sel 
n95=    inc %del
n96=  }
n97=}
n98=#MassCommands end
n99=
n100=#utilities on
n101=
n102=alias hdump {
n103=  var %i $hget($$1,0).item
n104=  while (%i > 0) {
n105=    echo -a $1 > %i > $hget($1,%i).item > $hget($1,%i).data
n106=    dec %i
n107=  }
n108=}
n109=
n110=alias htables {
n111=  var %i $hget(0)
n112=  while (%i > 0) {
n113=    echo -a %i > $hget(%i)
n114=    dec %i
n115=  }
n116=}
n117=
n118=#utilities end
n119=
n120=#dogesoak off
n121=
n122=on ^*:text:*:#dogecoin {
n123=  if ($nick != CodicAI) {
n124=    hadd -m SFC LastSpeak $nick
n125=    hinc -mz SFC LineScore $iif($nick isin %sfctrolls,10,$iif($nick = $hget(SFC,LastSpeak),5,3))
n126=    if ($hget(SFC,LineScore) < 10) { 
n127=      echo -a 0,7Linescore is within acceptable parameters 
n128=      msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n129=        trolls and fails to keep the silence add 10s)
n130=    }
n131=  }
n132=}
n133=
n134=on CAI:text:DED*:#dogecoin {
n135=  hinc -mu3600 SFC Count
n136=  echo -a 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore)
n137=  msg #dogecoin-silent No. $+ $hget(SFC,Count) 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) >
n138=  if ($hget(SFC,LineScore) < 11) { 
n139=    echo -a 0,7Linescore is within acceptable parameters 
n140=    msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n141=      trolls and fails to keep the silence add 10s)
n142=  }
n143=  hinc -mz SFC LineScore 10
n144=}
n145=
n146=on CAI:text:*minutes*:#dogecoin {
n147=  hadd -u30 SFC LineScore 0
n148=}
n149=
n150=alias ls {
n151=  echo -a Linescore is $hget(SFC,LineScore)
n152=}
n153=
n154=alias lsb {
n155=  echo -a Linescore is $hget(SFC,LineScore)
n156=  msg #dogecoin-silent Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n157=    trolls and fails to keep the silence add 10s)
n158=}
n159=
n160=alias ta {
n161=  set %sfctrolls %sfctrolls $$1
n162=  echo -a 2Troll List: %sfctrolls
n163=}
n164=
n165=;;on ^*:text:*:#dogecoin: { 
n166=;;var %r $r(1,25)
n167=;;var %e $r(1,25)
n168=;;if ((%r == %e) && (%nospam != 1)) {
n169=;;//msg $chan $gettok(%p,%e,44)
n170=;;//echo -a #dogecoin -> $gettok(%p,%e,44)
n171=;;//set $eval($+(-u,$r(2880,3000))) %nospam 1
n172=;;inc %dsexec
n173=;;}
n174=;;}
n175=
n176=#dogesoak end
n177=
n178=#miscaliases on
n179=
n180=alias tkq { return Use, but never overuse IRC, then you will also be happy within IRC } 
n181=alias tkk { kick $$1 $2 $tkq }
n182=
n183=alias tk { kick $chan $$1 $tkq }
n184=
n185=alias idlebotirc {
n186=  noop $$?="Did you Log out of the Web client? (no input) = no"
n187=  timer 1 2 /part #idlebot
n188=  echo -a Please wait One Minute, as this script completes the idlebot administrative task
n189=  timer 1 8 /nick Zazie_Lavender
n190=  timer 1 16 /join #idlebot
n191=  timer 1 24 /msg IdleMaster $$?1="Idle Command 1 - (!idle-*)" $$?="Command Verb and Params"
n192=  timer 1 28 /msg IdleMaster $?1="Idle Command 2 - (!idle-*)" $?="Command Verb and Params"
n193=  timer 1 32 /msg IdleMaster $?1="Idle Command 3 - (!idle-*)" $?="Command Verb and Params"
n194=  timer 1 36 /msg IdleMaster $?1="Idle Command 4 - (!idle-*)" $?="Command Verb and Params"
n195=  timer 1 40 /part #idlebot
n196=  timer 1 50 /nick Melody\Concerto
n197=  timer 1 60 /join #idlebot
n198=  echo -a Script complete. Idlebot IRC commands sent.
n199=}
n200=alias rnick {
n201=  return $fline($chan,*,$r(1,$line($chan,0,1)),1).text
n202=}
n203=#miscaliases end
n204=
n205=#operkey on
n206=alias F2 {
n207=  var %user %operu. [ $+ [ $network ] ]
n208=  var %pass %operp. [ $+ [ $network ] ]
n209=  if (!%user) { 
n210=    /echo -a 4,11NO O:LINES CONFIGURED FOR $network $+ ! 
n211=    halt
n212=  }
n213=  oper $decode(%user,m) $decode(%pass,m)
n214=}
n215=alias F3 { mode $me %operm. [ $+ [ $network ] ] } 
n216=#operkey end
n217=
n218=#strapfixkey on
n219=alias F4 { strapfix }
n220=alias F5 { bootstrap }
n221=#strapfixkey end
