[script]
n0=#ZNCAuth on
n1=;;Automated authentication code. Cleaned up for git upload...changed hardcoded params to variables.
n2=
n3=;Detect bad shutdowns and toggle a variable bit for them. If we're having issues where we're connected to the last server, we can run the strapfix.
n4=;While we can disable this behavior from mIRC; I'm not going to include that fix here; we're not going to enforce mIRC settings from script. 
n5=;We've also included a manual detect for the condition, you can remove that 
n6=;' || (%network != %BouncerNet0))' 
n7=;and the first parenthesis from the if statement if you don't want it.
n8=
n9=on ^*:exit: { unset %unsafe }
n10=
n11=;on ^*:disconnect: { if ($network == freenode) { exit -r } }
n12=
n13=raw 464:*: {
n14=  if ($server == %BouncerSvr) {
n15=    ;;Changed hardcoded user/password to a referenced variable for Github upload.
n16=    quote pass $+(%BouncerUsr,:,$decode(%BouncerPwd,m))
n17=    ;echo -a <---DEBUG---> Got connect to bouncer
n18=    timestamp -e on
n19=    set %network $scon(0)
n20=    set %unsafe 1
n21=    if (%cooldown == 1) {
n22=      echo -a 6,4Blocked Bootstrap Command. Cooldown Active
n23=      halt
n24=    }
n25=    /timer 1 2 /bootstrap
n26=    set -u300 %cooldown 1
n27=  }
n28=}
n29=#ZNCAuth end
n30=
n31=#wolfgame on
n32=on ^*:text:*:##werewolf: { if ($nick == lykos) { /wn <#lykos> $1- } }
n33=
n34=alias wn {
n35=  window -dDe2k0 @wolf /wn
n36=  aline -p @wolf $$1-
n37=}
n38=#wolfgame end
n39=
n40=#ZNCAutoCon on
n41=;;Bootstrap Autoconnect.
n42=
n43=alias bootstrap {
n44=  ;;Check to see if we've been called recently
n45=
n46=  set -u60 %cooldown 1
n47=  echo -a Node 0
n48=  ;;This performs the basic autoconnect and spawns the new server connections
n49=  ;We force each node to check and see if it is connected to the correct network,
n50=  ;and fire off the connection only if the network is missing
n51=
n52=  if ($scon(1).network == %BouncerNet0) {
n53=    if ($scon(2).$network != %BouncerNet1) {
n54=      ;echo -a Node 1
n55=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet1,:,$decode(%BouncerPwd,m))
n56=      var %c =1
n57=    }
n58=    if ($scon(3).$network != %BouncerNet2) {
n59=      ;echo -a Node 2
n60=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet2,:,$decode(%BouncerPwd,m))
n61=      var %c =1
n62=    }
n63=    if ($scon(4).$network != %BouncerNet3) {
n64=      ;echo -a Node 3
n65=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet3,:,$decode(%BouncerPwd,m))
n66=      var %c = 1
n67=    }
n68=    if ($scon(5).$network != %BouncerNet4) {
n69=      ;echo -a Node 4
n70=      server -m %BouncerSvr %BouncerPort $+(%BouncerUsr,/,%BouncerNet4,:,$decode(%BouncerPwd,m))
n71=      var %c = 1
n72=    }
n73=    if (%c = 1) {
n74=      ;echo -a Node 5
n75=      timer 1 5 /echo -a 5Launched timers to close off commonly spawned windows that are unnecessary
n76=      timer 1 15 /scid -a /close -m *ctcpflood
n77=      timer 1 119 /scid -a /znc clearallchannelbuffers
n78=      timer 1 120 /scid -a /close -m *status
n79=    }
n80=    else { echo -a 12,13Doing nothing, all servers are connected }
n81=  }
n82=}
n83=#ZNCAutoCon end
n84=
n85=#MassCommands on
n86=alias mping {
n87=  var %sel $sline($chan,0)
n88=  var %del 1
n89=  while (%sel > 0) {
n90=    /timer 1 %del /ctcp $sline($chan,%sel) PING
n91=    dec %sel 
n92=    inc %del
n93=  }
n94=}
n95=#MassCommands end
n96=
n97=#utilities on
n98=
n99=alias hdump {
n100=  var %i $hget($$1,0).item
n101=  while (%i > 0) {
n102=    echo -a $1 > %i > $hget($1,%i).item > $hget($1,%i).data
n103=    dec %i
n104=  }
n105=}
n106=
n107=alias htables {
n108=  var %i $hget(0)
n109=  while (%i > 0) {
n110=    echo -a %i > $hget(%i)
n111=    dec %i
n112=  }
n113=}
n114=
n115=#utilities end
n116=
n117=#dogesoak off
n118=
n119=on ^*:text:*:#dogecoin {
n120=  if ($nick != CodicAI) {
n121=    hadd -m SFC LastSpeak $nick
n122=    hinc -mz SFC LineScore $iif($nick isin %sfctrolls,10,$iif($nick = $hget(SFC,LastSpeak),5,3))
n123=    if ($hget(SFC,LineScore) < 10) { 
n124=      echo -a 0,7Linescore is within acceptable parameters 
n125=      msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n126=        trolls and fails to keep the silence add 10s)
n127=    }
n128=  }
n129=}
n130=
n131=on CAI:text:DED*:#dogecoin {
n132=  hinc -mu3600 SFC Count
n133=  echo -a 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore)
n134=  msg #dogecoin-silent No. $+ $hget(SFC,Count) 6,4RUINED IT: $hget(SFC,LastSpeak) @ $4 seconds left > Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) >
n135=  if ($hget(SFC,LineScore) < 11) { 
n136=    echo -a 0,7Linescore is within acceptable parameters 
n137=    msg #dogecoin-silent 0,7Linescore is within acceptable parameters @ $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n138=      trolls and fails to keep the silence add 10s)
n139=  }
n140=  hinc -mz SFC LineScore 10
n141=}
n142=
n143=on CAI:text:*minutes*:#dogecoin {
n144=  hadd -u30 SFC LineScore 0
n145=}
n146=
n147=alias ls {
n148=  echo -a Linescore is $hget(SFC,LineScore)
n149=}
n150=
n151=alias lsb {
n152=  echo -a Linescore is $hget(SFC,LineScore)
n153=  msg #dogecoin-silent Linescore is $hget(SFC,LineScore) < Approx. $duration($hget(SFC,LineScore)) > (Calculated with certain criteria, new speakers add 3s, repeat speakers add 5, $&
n154=    trolls and fails to keep the silence add 10s)
n155=}
n156=
n157=alias ta {
n158=  set %sfctrolls %sfctrolls $$1
n159=  echo -a 2Troll List: %sfctrolls
n160=}
n161=
n162=;;on ^*:text:*:#dogecoin: { 
n163=;;var %r $r(1,25)
n164=;;var %e $r(1,25)
n165=;;if ((%r == %e) && (%nospam != 1)) {
n166=;;//msg $chan $gettok(%p,%e,44)
n167=;;//echo -a #dogecoin -> $gettok(%p,%e,44)
n168=;;//set $eval($+(-u,$r(2880,3000))) %nospam 1
n169=;;inc %dsexec
n170=;;}
n171=;;}
n172=
n173=#dogesoak end
n174=
n175=#miscaliases on
n176=
n177=alias tkq { return Use, but never overuse IRC, then you will also be happy within IRC } 
n178=alias tkk { kick $$1 $2 $tkq }
n179=
n180=alias tk { kick $chan $$1 $tkq }
n181=
n182=alias idlebotirc {
n183=  noop $$?="Did you Log out of the Web client? (no input) = no"
n184=  timer 1 2 /part #idlebot
n185=  echo -a Please wait One Minute, as this script completes the idlebot administrative task
n186=  timer 1 8 /nick Zazie_Lavender
n187=  timer 1 16 /join #idlebot
n188=  timer 1 24 /msg IdleMaster $$?1="Idle Command 1 - (!idle-*)" $$?="Command Verb and Params"
n189=  timer 1 28 /msg IdleMaster $?1="Idle Command 2 - (!idle-*)" $?="Command Verb and Params"
n190=  timer 1 32 /msg IdleMaster $?1="Idle Command 3 - (!idle-*)" $?="Command Verb and Params"
n191=  timer 1 36 /msg IdleMaster $?1="Idle Command 4 - (!idle-*)" $?="Command Verb and Params"
n192=  timer 1 40 /part #idlebot
n193=  timer 1 50 /nick Melody\Concerto
n194=  timer 1 60 /join #idlebot
n195=  echo -a Script complete. Idlebot IRC commands sent.
n196=}
n197=alias rnick {
n198=  return $fline($chan,*,$r(1,$line($chan,0,1)),1).text
n199=}
n200=#miscaliases end
n201=
n202=#operkey on
n203=alias F2 {
n204=  var %user %operu. [ $+ [ $network ] ]
n205=  var %pass %operp. [ $+ [ $network ] ]
n206=  if (!%user) { 
n207=    /echo -a 4,11NO O:LINES CONFIGURED FOR $network $+ ! 
n208=    halt
n209=  }
n210=  oper $decode(%user,m) $decode(%pass,m)
n211=}
n212=#operkey end
